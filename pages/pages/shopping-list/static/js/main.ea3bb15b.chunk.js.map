{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Item","item","index","completeItem","removeItem","style","isChecked","color","textDecoration","className","onClick","title","icon","faTrash","ItemForm","addItem","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","items","setItems","newItems","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAKA,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WAYzC,OAAO,yBAAKC,MAAOJ,EAAKK,UAVH,CACnBC,MAAO,OACPC,eAAgB,gBAGM,CACtBD,MAAO,OACPC,eAAgB,QAIlBC,UAAU,QACR,yBAAKA,UAAU,QAAQC,QAAS,kBAAMP,EAAaD,KAEhDD,EAAKU,OAER,yBAAKF,UAAU,OACb,4BAAQA,UAAU,QAAQC,QAAS,kBAAMN,EAAWF,KAClD,kBAAC,IAAD,CAAiBU,KAAMC,SAM/B,SAASC,EAAT,GAA6B,IAAVC,EAAS,EAATA,QAAS,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,KAU1B,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAKP,2BAAOI,KAAK,OAAOb,UAAU,QAAQc,YAAY,eAAeN,MAAOA,EAAOO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,WAmDtGS,MA9Cf,WAAgB,IAAD,EAEaV,mBAAS,IAFtB,mBAENW,EAFM,KAECC,EAFD,KAsBPzB,EAAe,SAAAD,GACnB,IAAM2B,EAAQ,YAAOF,GACrBE,EAAS3B,GAAOI,WAAauB,EAAS3B,GAAOI,UAC7CsB,EAASC,IAGLzB,EAAa,SAAAF,GACjB,IAAM2B,EAAQ,YAAOF,GACrBE,EAASC,OAAO5B,EAAO,GACvB0B,EAASC,IAGX,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACK,EAAD,CAAUC,QApBA,SAAAJ,GACd,IAAMkB,EAAQ,sBAAOF,GAAP,CAAc,CAAEhB,WAC9BiB,EAASC,MAmBJF,EAAMI,KAAI,SAAC9B,EAAMC,GAAP,OACT,kBAACF,EAAD,CAAMgC,IAAK9B,EAAOA,MAAOA,EAAOD,KAAMA,EAAME,aAAcA,EAAcC,WAAYA,UC3E1E6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea3bb15b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\n\nfunction Item({ item, index, completeItem, removeItem }) {\n\n  const styleChecked = {\n    color: '#888',\n    textDecoration: 'line-through'\n  }\n\n  const styleNonChecked = {\n    color: '#000',\n    textDecoration: 'none'\n  }\n\n  return <div style={item.isChecked ? styleChecked : styleNonChecked} \n  className=\"item\">\n    <div className=\"title\" onClick={() => completeItem(index)}>\n      {/* <input type=\"checkbox\" onClick={() => completeItem(index)}></input> */}\n      {item.title}\n    </div>\n    <div className=\"btn\">\n      <button className=\"trash\" onClick={() => removeItem(index)}>\n        <FontAwesomeIcon icon={faTrash} />\n      </button>\n    </div>\n  </div>;\n}\n\nfunction ItemForm({addItem}){\n  const [value, setValue] = useState('')\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (!value) return\n    addItem(value)\n    setValue('')\n  }\n\n  return(\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" className=\"input\" placeholder=\"Add item ...\" value={value} onChange={e => setValue(e.target.value)}></input>\n    </form>\n  )\n}\n\nfunction App() {\n\n  const [items, setItems] = useState([\n    // {\n    //   title: 'Milk',\n    //   isChecked: false\n    // },\n    // {\n    //   title: 'Cheese',\n    //   isChecked: false\n    // },\n    // {\n    //   title: 'Chicken',\n    //   isChecked: false\n    // }\n  ])\n\n  const addItem = title => {\n    const newItems = [...items, { title }]\n    setItems(newItems)\n  }\n\n  const completeItem = index => {\n    const newItems = [...items]\n    newItems[index].isChecked = !newItems[index].isChecked\n    setItems(newItems)\n  }\n\n  const removeItem = index => {\n    const newItems = [...items]\n    newItems.splice(index, 1)\n    setItems(newItems)\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"item-list\">\n        <ItemForm addItem={addItem} />\n        {items.map((item, index) => (\n          <Item key={index} index={index} item={item} completeItem={completeItem} removeItem={removeItem} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}